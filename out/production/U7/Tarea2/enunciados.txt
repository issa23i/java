Tarea 2
Actividad 9: Implementar el método unión de dos conjuntos,
que devuelva un nuevo conjunto con todos los elementos que pertenezcan,
al menos, a uno de los dos conjuntos. Su prototipo es:

Set union (Set conjunto1, Set conjunto2)
Actividad 10: Hacer lo mismo que en el ejercicio anterior con la intersección , formada por los elementos comunes a los dos conjuntos. Su prototipo es:

Set interseccion (Set conjunto1, Set conjunto2)
Actividad 11: Diseñar un método que devuelva la diferencia de dos conjuntos (elementos que pertenecen al primero, pero no al segundo). Con el prototipo:

Set diferencia (Set conjunto1, Set conjunto2)
Actividad 12: Escribir el método incluido(), que devuelve true si todos los elementos del primer conjunto pertenecen al segundo y false si hay algún elemento del primero que no pertenezca al segundo. Su prototipo es:

boolean incluido(Set conjunto1, Set conjunto2)
Actividad 13: Implementar una función a la que se le pasen dos listas ordenadas y nos devuelva una única lista, fusión de las dos anteriores. Desarrollar el algoritmo de forma no destructiva, es decir, que las listas utilizadas como parámetros de entrada se mantengan intactas.

Actividad 14: Implementar la función leeCadena con el siguiente prototipo:

List<Character> leeCadena()
Dicha función lee una cadena por teclado y nos la devuelve en una lista con un carácter en cada nodo.

Actividad 15: Definir una clase ListaOrdenada, que hereda de LinkedList, que permita la inserción ordenada. Codificar un método que inserte un nuevo elemento con el prototipo:

void insertarOrdenado( E elemento)